name: Sonarcloud

env:
    PHP: '8.0'

on:
    workflow_dispatch:
    schedule:
        - cron:  '15 0 * * 6'

jobs:
    install_shop_with_module:
        runs-on: ubuntu-latest
        steps:
            - name: Clone testing environment
              run: git clone https://github.com/OXID-eSales/docker-eshop-sdk.git .

            - name: Clone the shop
              run: git clone --depth 1 https://github.com/OXID-eSales/oxideshop_ce.git --branch b-7.0.x --single-branch source

            - name: Cache current installation
              uses: actions/cache@v2
              with:
                  path: |
                      ./*
                  key: shopInstallation-${{ env.PHP }}-${{ github.sha }}

            - name: Prepare container configuration
              run: |
                  make setup
                  make addbasicservices
                  perl -pi\
                      -e "s#PHP_VERSION=.*#PHP_VERSION='${{ env.PHP }}'#g;"\
                      .env

                  perl -pi\
                      -e 's#display_errors =.*#display_errors = false#g;'\
                      -e 'print "xdebug.max_nesting_level=1000\nxdebug.mode=coverage\n\n";'\
                      -e 'print "error_reporting = E_ALL & ~E_DEPRECATED & ~E_NOTICE & ~E_WARNING\n"'\
                      containers/php/custom.ini

                  perl -pi\
                      -e 's#/var/www/#/var/www/source/#g;'\
                      containers/httpd/project.conf

            - name: Prepare shop configuration
              run: |
                  cp source/source/config.inc.php.dist source/source/config.inc.php
                  perl -pi\
                    -e 'print "SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=\$1\n\n" if $. == 1'\
                    source/source/.htaccess
                  perl -pi\
                    -e 's#<dbHost>#mysql#g;'\
                    -e 's#<dbUser>#root#g;'\
                    -e 's#<dbName>#example#g;'\
                    -e 's#<dbPwd>#root#g;'\
                    -e 's#<dbPort>#3306#g;'\
                    -e 's#<sShopURL>#http://localhost.local/#g;'\
                    -e 's#<sShopDir>#/var/www/source/#g;'\
                    -e 's#<sCompileDir>#/var/www/source/tmp/#g;'\
                    source/source/config.inc.php

            - name: Start containers
              run: |
                  make up
                  sleep 2

            - name: Install dependencies
              run: docker-compose exec -T php composer update --no-interaction

            - name: Checkout current module
              uses: actions/checkout@v2
              with:
                  path: source/test-module

            - name: Install module
              run: |
                  docker-compose exec -T \
                    php composer config repositories.oxid-esales/grapqhl-base \
                    --json '{"type":"path", "url":"./test-module", "options": {"symlink": true}}'
                  docker-compose exec -T \
                    php composer require oxid-esales/graphql-base:* --no-interaction

            - name: Reset shop
              run: |
                  docker-compose exec -T \
                    php bin/oe-console oe:database:reset --db-host=mysql --db-port=3306 \
                    --db-name=example --db-user=root --db-password=root --force

            - name: Activate module
              run: |
                  docker-compose exec -T php bin/oe-console oe:module:activate oe_graphql_base

            - name: Stop containers
              run: |
                  docker-compose down
                  sleep 2

    unit_tests:
        needs: [ install_shop_with_module ]
        runs-on: ubuntu-latest
        steps:
            - name: Load current installation from cache
              uses: actions/cache@v2
              with:
                  path: |
                      ./*
                  key: shopInstallation-${{ env.PHP }}-${{ github.sha }}
                  restore-keys: |
                      shopInstallation-${{ env.PHP }}-${{ github.sha }}

            - name: Start containers
              run: |
                  make up
                  sleep 2

            - name: Run tests
              continue-on-error: true
              run: |
                  docker-compose exec -T \
                    -e XDEBUG_MODE=coverage \
                    php php vendor/bin/phpunit \
                      -c /var/www/vendor/oxid-esales/graphql-base/tests/phpunit.xml \
                      --coverage-html=Coverage \
                      --coverage-php=/var/www/unit.cov \
                      --coverage-text \
                      --log-junit=/var/www/phpunit.xml \
                      /var/www/vendor/oxid-esales/graphql-base/tests/

            - name: Upload log artifact
              uses: actions/upload-artifact@v2
              with:
                  name: TestsLog
                  path: source/unit.cov

    codeception_tests:
        needs: [ install_shop_with_module ]
        runs-on: ubuntu-latest
        steps:
            - name: Load current installation from cache
              uses: actions/cache@v2
              with:
                  path: |
                      ./*
                  key: shopInstallation-${{ env.PHP }}-${{ github.sha }}
                  restore-keys: |
                      shopInstallation-${{ env.PHP }}-${{ github.sha }}

            - name: Start containers
              run: |
                  make up
                  sleep 2

            - name: Install codeception dependencies
              run: |
                  docker-compose exec -T php composer require codeception/c3 --dev --no-update
                  docker-compose exec -T php composer require codeception/module-rest:^3.0.0 --dev --no-update
                  docker-compose exec -T php composer require codeception/module-phpbrowser:^3.0.0 --dev --no-update
                  docker-compose exec -T php composer config --no-plugins allow-plugins.codeception/c3 true
                  docker-compose exec -T php composer update
                  sed -i 's/<?php/<?php\n\nrequire(__DIR__ . "\/..\/c3.php");/' source/source/bootstrap.php

            - name: Run tests
              continue-on-error: true
              run: |
                  docker-compose exec -T \
                    -e SELENIUM_SERVER_HOST=selenium \
                    -e MODULE_IDS=oe_graphql_base \
                    -e XDEBUG_MODE=coverage \
                    php php vendor/bin/codecept run acceptance \
                      -c /var/www/vendor/oxid-esales/graphql-base/tests/codeception.yml

            - name: Extract and prepare the coverage artifact
              run: |
                  cp source/test-module/tests/Codeception/_output/coverage.serialized codeception.cov

            - name: Upload log artifact
              uses: actions/upload-artifact@v2
              with:
                  name: TestsLog
                  path: codeception.cov

    prepare_coverage_results:
        needs: [ unit_tests, codeception_tests ]
        runs-on: ubuntu-latest
        steps:
            - name: Load current installation from cache
              uses: actions/cache@v2
              with:
                  path: |
                      ./*
                  key: shopInstallation-${{ env.PHP }}-${{ github.sha }}
                  restore-keys: |
                      shopInstallation-${{ env.PHP }}-${{ github.sha }}

            - name: Download unit artifacts
              uses: actions/download-artifact@v2
              with:
                  name: TestsLog
                  path: ./source/covs/

            - name: Collect and merge coverage reports
              continue-on-error: true
              run: |
                  ls -alh source/covs/
                  wget https://phar.phpunit.de/phpcov-7.0.2.phar
                  mv phpcov-7.0.2.phar source/phpcov.phar
                  docker-compose run -T php php phpcov.phar merge --clover covs/coverage.xml covs
                  sed -i 's+/var/www/test-module/+./+' source/covs/coverage.xml
            - name: Upload log artifact
              uses: actions/upload-artifact@v2
              with:
                  name: TestsLog
                  path: source/covs/coverage.xml

    sonarcloud:
        needs: [ prepare_coverage_results ]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Checkout current module
              uses: actions/checkout@v2

            - name: Download artifacts
              uses: actions/download-artifact@v2
              with:
                  name: TestsLog
                  path: ./logs/

            - name: Fix paths in unit logs
              run: |
                  ls -alh logs
                  sed -i 's+/var/www/test-module/++' logs/coverage.xml

            - name: SonarCloud Scan
              uses: sonarsource/sonarcloud-github-action@master
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              with:
                  args: >
                      -Dsonar.organization=oxid-esales
                      -Dsonar.projectKey=OXID-eSales_graphql-base-module
                      -Dsonar.projectVersion=0.1.0
                      -Dsonar.sources=src
                      -Dsonar.tests=tests
                      -Dsonar.sourceEncoding=UTF-8
                      -Dsonar.php.coverage.reportPaths=logs/coverage.xml
                      -Dsonar.cpd.php.minimumTokens=30
                      -Dsonar.cpd.php.minimumLines=6

    notify_slack:
        runs-on: ubuntu-latest
        needs: [ unit_tests, codeception_tests, sonarcloud ]
        if: always() && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule')
        steps:
            - name: Send custom JSON data to Slack workflow
              uses: slackapi/slack-github-action@v1.23.0
              with:
                  # "needs" context used to access the state of related jobs
                  # "github" context used to access workflow its trigger information
                  # Warning: Payload is JSON format given through Yaml. Be careful with new lines and do not make it NICE looking, it will not work here ;)
                  # Help: New lines can be easily added for texts bellow. Check how it's currently implemented in this example!
                  payload: >
                      {"text": "
                      ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Scheduled' }} ${{ github.workflow }} workflow on ${{ github.repository }}
                      ${{ (needs.unit_tests.result=='success' && needs.codeception_tests.result=='success' && needs.sonarcloud.result=='success') && 'Successful' || 'Failed' }}
                      ", "blocks": [{"type": "header","text": {"type": "plain_text", "emoji": true, "text": "
                      ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Scheduled' }} ${{ github.workflow }} workflow on ${{ github.repository }}
                      "}},{"type": "section","fields": [{"type": "mrkdwn","text": "
                      *Status:* ${{ (needs.unit_tests.result=='success' && needs.codeception_tests.result=='success' && needs.sonarcloud.result=='success') && ':heavy_check_mark:' || ':x:' }}
                      "},{"type": "mrkdwn","text": "
                      Repository: <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>
                      "}]},{"type": "section", "text": {"type": "mrkdwn", "text": "
                      \n* Unit tests job ${{ (needs.unit_tests.result=='success') && ':heavy_check_mark:' || ':x:' }}
                      \n* Codeception tests job ${{ (needs.codeception_tests.result=='success') && ':heavy_check_mark:' || ':x:' }}
                      \n* Sonarcloud job ${{ (needs.sonarcloud.result=='success') && ':heavy_check_mark:' || ':x:' }}
                      "}}, {"type": "divider"}]}
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
